// 并查集
function minMalwareSpread(graph, initial) {
    const n = graph.length
    const fa = new Array(n).fill(0).map((_, index) => index)
    const rank = new Array(n).fill(1)
    const find = x => {
        if (fa[x] !== x) {
            fa[x] = find(fa[x])
        }
        return fa[x]
    }
    const union = (x, y) => {
        const px = find(x)
        const py = find(y)
        if (px === py) {
            return
        }
        if (rank[px] >= rank[py]) {
            fa[py] = px
            rank[px] += rank[py]
        } else {
            fa[px] = py
            rank[py] += rank[px]
        }
    }
    for (let i = 0; i < n; i++) {
        for (let j = i + 1; j < n; j++) {
            if (graph[i][j] === 1) {
                union(i, j)
            }
        }
    }
    // 保证initial值有序
    initial.sort((a, b) => a < b ? -1 : 1)
    let result = initial[0]
    let effect = 0
    outer:
    for (const v of initial) {
        const fa = find(v)
        for (const v1 of initial) {
            if (v1 === v) continue
            // initial中存在其他节点v1与v处于一个连通集，此时删除了也没用
            if (find(v1) === fa) {
                continue outer
            }
        }
        // initial中不存在其他节点v1与v处于一个连通集，此时影响大小为v所在连通集的大小
        if (rank[fa] > effect) {
            result = v
            effect = rank[fa]
        }
    }
    return result
}